#############
### NOTES ###
#############
# Everything can be templated. The way the template system works is is when we see the template
# syntax we replace that key with the file contents, first replacing the .Inputs with the
# arguments passed to the template. See .Inputs vs .Parameters below.

# .Inputs vs .Parameters
# Inputs come from merging a template with another file when setting up a deployment, or specified
# when calling a template from another template. An easy way to think of them are compile-time variables.
# Parameters on the other hand are decidedly runtime variables-coming from trigger inputs or manually
# specified values at runtime.


################
### METADATA ###
################

# the name here is mostly for display of this run, it is a readable identifier for this run
name: myapp

# the version is also metadata although it will likely be a parameter that is also used elsewhere
version: ${{ .Parameters.version }}

# application is a place to specify how to link this run to the applications page
application:
  name: myapp # linked to the label apps.kubernetes.io/name
  partOf: mysystem # linked to the label apps.kubernetes.io/part-of
  version: ${{ .Parameters.version }} # linked to the label apps.kubernetes.io/version

# links are attached to runs in order to allow easy access to external services such as grafana
# they can still be templated in order to be customized per run
links:
  - name: mylink
    url: http://mylinkurl.doenstexist

################
### TRIGGERS ###
################
triggers:
  # a deployment trigger is when one deployment triggers another, see below for the other end
  - deployment:
      name: deployment-trigger
  
  # a web trigger is a trigger that the user can get a token for and call with a normal web post
  # useful for integrating with CI or other automated systems
  - web:
      name: web-trigger
  
  # although the point of boatswain is CD, we do have manual triggers
  # for roles note that it is that role and higher roles so as an example Editor below can also
  # be approved by a user with the Admin role
  - manual:
      name: manual-trigger
      role: Editor
      users:
        - "Adam Page"

################
### STRATEGY ###
################

# a strategy is the means by which an application is deployed, and is a collection of steps
# these steps execute in order based on the condition, which are condition() or condition(stepName)
# available conditions are always, any, failed, and succeeded with the following behavior:
#   always: run always, regardless of the step name passed and any previous results
#   any: run for any condition of the given step, if no step is passed the previous step result is used
#   failed: run only if the step failed, if no step is passed the previous step result is used
#   succeeded: run only if the step failed, if no step is passed the previous step result is used
strategy:
  - name: my-deploy-step
    hold: 10m1s # this is executed before the step is started, see: https://pkg.go.dev/time#ParseDuration
    condition: always() # valid are always, any, succeeded, and failed
    helm:
      name: my-release # the release name, exactly how its used by helm, overrides selector
      # the selector feature allows the user to look up a helm release name by labels
      # it gets all deployments and statefulsets with the given label selector and looks
      # through them for the meta.helm.sh/release-name annotation to get the release name
      # as mentioned above if name is specified, this is ignored and it should also be noted
      # that the system makes no guarantees if multiple releases are found
      selector:
        apps.kubernetes.io/name: myapp
      cluster: dev # the name of the boatswain cluster to use - this is how we contact that cluster
      namespace: coolnamespace # the namespace to run the command in (and also search for selectors)
      command: install # helm command similar to the cli, valid: install, upgrade, uninstall, rollback, test
      chart:
        name: mychart # the name of the chart in the repo
        repo: myrepo # the boatswain repo to get this chart from, note that oci are supported
        version: "1.0" # the version of the chart to pull, must be specified for oci repos
      options:
        rollbackVersion: 2 # helm uses int indexes for release versions, so this is the target when rolling back
        wait: true # similar to the --wait flag, whether to wait for the helm command to be ready
        install: false # similar to --install flag, ONLY for the upgrade command
        timeout: 1m10s # the time to wait for the deployment to be ready , see: https://pkg.go.dev/time#ParseDuration
      values:
        library: # use a file from a library chart as a values file input, note we don't enforce that its a libary chart
          chart: mychart # the name of the chart
          repo: myrepo # the bosn repo to get the chart from, oci is supported
          version: "1.0" # the version of the chart, required for oci
          file: myfile.yaml # the name of the values file to use, only one may be selected
        raw: # specify raw values, NOTE that these override library and chart values
          something:
            something:
              something: darkside
  
  # template syntax used to substitute another template in here, note the arguments become the
  # .Inputs object on the template and .Parameters are treated the same as they would be in this
  # file, and that the repo is the name of the boatswain repo
  - template: path/to/template.yaml
    branch: main
    repo: myrepo
    arguments:
      one: two
      three:
        four: five

  
  # an approval is a step where a person must log in and unblock it before it proceeds
  # a rejection here is counted as a step failure for conditions
  - name: my-approval
    condition: succeeeded(my-deploy-step)
    approval:
      # similar to roles above as far as permissions, but multiple can be specified
      roles:
        - Editor
        - Reader
      users:
        - "Adam Page"
    
  # triggers are steps that trigger other boatswain deployments
  - name: trigger-another
    condition: failed() # this runs if the approval fails only
    trigger:
      name: my-trigger # note this is the name of the trigger on the deployment being triggered
      deployment: my-deployment # the boatswain name of the deployment being triggered
      arguments: # args passed to the other deployment, essentially the .Parameters object
        a: b
