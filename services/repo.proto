/*
Repo is the service managing external repositories, such as helm.
*/
syntax = "proto3";
package redsail.bosn;
option go_package = "github.com/redsailtechnologies/boatswain/rpc/repo;repo";

service Repo {
    // adds a repo to the list of configurations
    rpc Create (CreateRepo) returns (RepoCreated);
    
    // edits an already existing repo
    rpc Update (UpdateRepo) returns (RepoUpdated);
    
    // removes a repo from the list of configurations
    rpc Destroy (DestroyRepo) returns (RepoDestroyed);

    // reads out a repo
    rpc Read (ReadRepo) returns (RepoRead);
    
    // finds the repo uuid by name
    rpc Find (FindRepo) returns (RepoFound);
    
    // gets all repos currently configured and their status
    rpc All (ReadRepos) returns (ReposRead);

    // gets the contents of a file from this git repository
    rpc File (ReadFile) returns (FileRead);
}

message CreateRepo {
    string name = 1; // name of the repo
    string endpoint = 2; // repo endpoint
    RepoType type = 3; // type of repo
    string token = 4; // an auth token (if required for this repo)
}

message RepoCreated {}

message UpdateRepo {
    string uuid = 1; // unique id of the repo
    string name = 2; // name of the repo
    string endpoint = 3; // repo endpoint
    RepoType type = 4; // type of repo
    string token = 5; // an auth token (if required for this repo)
}

message RepoUpdated {}

message DestroyRepo {
    string uuid = 1; // unique id of the repo
}

message RepoDestroyed {}

message ReadRepo {
    string uuid = 1; // unique id of the repo
}

message RepoRead {
    string uuid = 1; // unique id of the repo
    string name = 2; // name of the repo
    string endpoint = 3; // repo endpoint
    RepoType type = 4; // type of repo
    string token = 5; // an auth token (if required for this repo)
    bool ready = 6; // repo ready status, based on whether index.yaml can be fetched
}

message FindRepo {
    string name = 1; // the name of the repo to search for
}

message RepoFound {
    string uuid = 1; //unique id of the repo found
}

message ReadRepos {}

message ReposRead {
    repeated RepoRead repos = 1; // repos read
}

message ReadChart {
    string repo_id = 1; // unique id of the repo
    string name = 2; // name of the chart
    string version = 3; // chart version
}

message ChartRead {
    bytes chart = 1; // the contents of the chart
}

message ReadFile {
    string repo_id = 1; // unique id of the repo
    string branch = 2; // the branch to read the file from
    string file_path = 3; // relative path to the file
}

message FileRead {
    bytes file = 1; // the contents of the file read
}

enum RepoType{
    HELM = 0;
    GIT = 1;
}
