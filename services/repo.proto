/*
Repo is the service managing external repositories, such as helm.
*/
syntax = "proto3";
package redsail.bosn;
option go_package = "github.com/redsailtechnologies/boatswain/rpc/repo;repo";

service Repo {
    // adds a repo to the list of configurations
    rpc Create (CreateRepo) returns (RepoCreated);
    
    // edits an already existing repo
    rpc Update (UpdateRepo) returns (RepoUpdated);
    
    // removes a repo from the list of configurations
    rpc Destroy (DestroyRepo) returns (RepoDestroyed);

    // reads out a repo
    rpc Read (ReadRepo) returns (RepoRead);
    
    // gets all repos currently configured and their status
    rpc All (ReadRepos) returns (ReposRead);

    // gets the contents of a file from this git repository
    rpc File (ReadFile) returns (FileRead);
}

message CreateRepo {
    string name = 1; // name of the repo
    string endpoint = 2; // repo endpoint
    RepoType type = 3; // type of repo
    string token = 4; // an auth token (if required for this repo)
    string username = 5; // a username to login with
    string password = 6; // a password to login with
    bool helm_oci = 7; // whether or not this is an OCI registry rather than a typical helm registry
}

message RepoCreated {}

message UpdateRepo {
    string uuid = 1; // unique id of the repo
    string name = 2; // name of the repo
    string endpoint = 3; // repo endpoint
    RepoType type = 4; // type of repo
    string token = 5; // an auth token (if required for this repo)
    string username = 6; // a username to login with
    string password = 7; // a password to login with
    bool helm_oci = 8; // whether or not this is an OCI registry rather than a typical helm registry
}

message RepoUpdated {}

message DestroyRepo {
    string uuid = 1; // unique id of the repo
}

message RepoDestroyed {}

message ReadRepo {
    string uuid = 1; // unique id of the repo
}

message RepoRead {
    string uuid = 1; // unique id of the repo
    string name = 2; // name of the repo
    string endpoint = 3; // repo endpoint
    RepoType type = 4; // type of repo
    bool helm_oci = 5; // whether or not this is an OCI registry rather than a typical helm registry
    bool ready = 6; // repo ready status, based on whether index.yaml can be fetched
}

message ReadRepos {}

message ReposRead {
    repeated RepoRead repos = 1; // repos read
}

message ReadFile {
    string repo_id = 1; // unique id of the repo
    string branch = 2; // the branch to read the file from
    string file_path = 3; // relative path to the file
}

message FileRead {
    bytes file = 1; // the contents of the file read
}

enum RepoType {
    HELM_REPO = 0;
    GIT_REPO = 1;
}

enum AuthType {
    CREDENTIALS = 0;
    TOKEN = 1;
}
