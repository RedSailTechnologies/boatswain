// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kraken

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// KrakenClient is the client API for Kraken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KrakenClient interface {
	Clusters(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error)
	Deployments(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*DeploymentResponse, error)
}

type krakenClient struct {
	cc grpc.ClientConnInterface
}

func NewKrakenClient(cc grpc.ClientConnInterface) KrakenClient {
	return &krakenClient{cc}
}

func (c *krakenClient) Clusters(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/Kraken/Clusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krakenClient) Deployments(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*DeploymentResponse, error) {
	out := new(DeploymentResponse)
	err := c.cc.Invoke(ctx, "/Kraken/Deployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KrakenServer is the server API for Kraken service.
// All implementations must embed UnimplementedKrakenServer
// for forward compatibility
type KrakenServer interface {
	Clusters(context.Context, *ClusterRequest) (*ClusterResponse, error)
	Deployments(context.Context, *DeploymentRequest) (*DeploymentResponse, error)
	mustEmbedUnimplementedKrakenServer()
}

// UnimplementedKrakenServer must be embedded to have forward compatible implementations.
type UnimplementedKrakenServer struct {
}

func (UnimplementedKrakenServer) Clusters(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clusters not implemented")
}
func (UnimplementedKrakenServer) Deployments(context.Context, *DeploymentRequest) (*DeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deployments not implemented")
}
func (UnimplementedKrakenServer) mustEmbedUnimplementedKrakenServer() {}

// UnsafeKrakenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KrakenServer will
// result in compilation errors.
type UnsafeKrakenServer interface {
	mustEmbedUnimplementedKrakenServer()
}

func RegisterKrakenServer(s *grpc.Server, srv KrakenServer) {
	s.RegisterService(&_Kraken_serviceDesc, srv)
}

func _Kraken_Clusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrakenServer).Clusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kraken/Clusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrakenServer).Clusters(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kraken_Deployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrakenServer).Deployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kraken/Deployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrakenServer).Deployments(ctx, req.(*DeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kraken_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Kraken",
	HandlerType: (*KrakenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clusters",
			Handler:    _Kraken_Clusters_Handler,
		},
		{
			MethodName: "Deployments",
			Handler:    _Kraken_Deployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kraken/service.proto",
}
